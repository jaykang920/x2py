# auto-generated by x2py xpiler

from x2py.cell import Cell
from x2py.event import Event

class MyConsts:
    MY_CONST1 = 1
    MY_CONST2 = 2

def _init_my_cell1_tag():
    props = []
    props.append(('Foo', 5))
    return Cell.Tag(None, props)

class MyCell1(Cell):
    tag = _init_my_cell1_tag()

    def __init__(self, length=0):
        super().__init__(len(MyCell1.tag.props) + length)
        base = MyCell1.tag.offset
        self.values[base + 0] = 0

    @property
    def foo(self):
        return self.values[MyCell1.tag.offset + 0]
    @foo.setter
    def foo(self, value):
        self._set_property(MyCell1.tag.offset + 0, value,
            MyCell1.tag.props[0][1])

    def type_id(self):
        return MyCell1.tag.type_id

    def type_tag(self):
        return MyCell1.tag

def _init_my_cell2_tag():
    props = []
    props.append(('Bar', 9))
    return Cell.Tag(MyCell1.tag, props)

class MyCell2(MyCell1):
    tag = _init_my_cell2_tag()

    def __init__(self, length=0):
        super().__init__(len(MyCell2.tag.props) + length)
        base = MyCell2.tag.offset
        self.values[base + 0] = ""

    @property
    def bar(self):
        return self.values[MyCell2.tag.offset + 0]
    @bar.setter
    def bar(self, value):
        self._set_property(MyCell2.tag.offset + 0, value,
            MyCell2.tag.props[0][1])

    def type_id(self):
        return MyCell2.tag.type_id

    def type_tag(self):
        return MyCell2.tag

def _init_my_event1_tag():
    props = []
    props.append(('Foo', 9))
    return Event.Tag(Event.tag, props,
        1)

class MyEvent1(Event):
    tag = _init_my_event1_tag()

    def __init__(self, length=0):
        super().__init__(len(MyEvent1.tag.props) + length)
        base = MyEvent1.tag.offset
        self.values[base + 0] = ""

    @property
    def foo(self):
        return self.values[MyEvent1.tag.offset + 0]
    @foo.setter
    def foo(self, value):
        self._set_property(MyEvent1.tag.offset + 0, value,
            MyEvent1.tag.props[0][1])

    def type_id(self):
        return MyEvent1.tag.type_id

    def type_tag(self):
        return MyEvent1.tag

def _init_my_event2_tag():
    props = []
    props.append(('Bar', 9))
    return Event.Tag(MyEvent1.tag, props,
        2)

class MyEvent2(MyEvent1):
    tag = _init_my_event2_tag()

    def __init__(self, length=0):
        super().__init__(len(MyEvent2.tag.props) + length)
        base = MyEvent2.tag.offset
        self.values[base + 0] = ""

    @property
    def bar(self):
        return self.values[MyEvent2.tag.offset + 0]
    @bar.setter
    def bar(self, value):
        self._set_property(MyEvent2.tag.offset + 0, value,
            MyEvent2.tag.props[0][1])

    def type_id(self):
        return MyEvent2.tag.type_id

    def type_tag(self):
        return MyEvent2.tag
