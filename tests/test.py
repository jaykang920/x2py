# auto-generated by x2py xpiler

from x2py.cell import Cell
from x2py.event import Event
from x2py.util.misc import hash_update

class MyConsts:
    MY_CONST1 = 1
    MY_CONST2 = 2

class MyCell1(Cell):
    tag = Cell.Tag(Cell.tag, 'MyCell1', 1)

    def __init__(self, length=0):
        super().__init__(MyCell1.tag.num_props + length)
        self._foo = 0

    @property
    def foo(self):
        return self._foo
    @foo.setter
    def foo(self, value):
        self.fingerprint.touch(MyCell1.tag.offset + 0)
        self._foo = value

    def type_id(self):
        return MyCell1.tag.type_id

    def type_tag(self):
        return MyCell1.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyCell1.tag.offset
        if other.fingerprint.get(base + 0):
            if self._foo != other._foo:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._foo != other._foo:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._foo))
        return value

class MyCell2(MyCell1):
    tag = Cell.Tag(MyCell1.tag, 'MyCell2', 1)

    def __init__(self, length=0):
        super().__init__(MyCell2.tag.num_props + length)
        self._bar = ""

    @property
    def bar(self):
        return self._bar
    @bar.setter
    def bar(self, value):
        self.fingerprint.touch(MyCell2.tag.offset + 0)
        self._bar = value

    def type_id(self):
        return MyCell2.tag.type_id

    def type_tag(self):
        return MyCell2.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyCell2.tag.offset
        if other.fingerprint.get(base + 0):
            if self._bar != other._bar:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._bar != other._bar:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._bar))
        return value

class MyEvent1(Event):
    tag = Event.Tag(Event.tag, 'MyEvent1', 1,
        1)

    def __init__(self, length=0):
        super().__init__(MyEvent1.tag.num_props + length)
        self._foo = ""

    @property
    def foo(self):
        return self._foo
    @foo.setter
    def foo(self, value):
        self.fingerprint.touch(MyEvent1.tag.offset + 0)
        self._foo = value

    def type_id(self):
        return MyEvent1.tag.type_id

    def type_tag(self):
        return MyEvent1.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyEvent1.tag.offset
        if other.fingerprint.get(base + 0):
            if self._foo != other._foo:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._foo != other._foo:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._foo))
        return value

class MyEvent2(MyEvent1):
    tag = Event.Tag(MyEvent1.tag, 'MyEvent2', 1,
        2)

    def __init__(self, length=0):
        super().__init__(MyEvent2.tag.num_props + length)
        self._bar = ""

    @property
    def bar(self):
        return self._bar
    @bar.setter
    def bar(self, value):
        self.fingerprint.touch(MyEvent2.tag.offset + 0)
        self._bar = value

    def type_id(self):
        return MyEvent2.tag.type_id

    def type_tag(self):
        return MyEvent2.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyEvent2.tag.offset
        if other.fingerprint.get(base + 0):
            if self._bar != other._bar:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._bar != other._bar:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._bar))
        return value
