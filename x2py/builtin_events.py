# auto-generated by x2py xpiler

from .cell import *
from .event import *

class BuiltinEventType:
    HEARTBEAT_EVENT = -1
    FLOW_START = -2
    FLOW_STOP = -3
    TIMEOUT_EVENT = -4

def _init_my_cell_tag():
    props = []
    props.append(('Foo', 9))
    return Cell.Tag(None, props)

class MyCell(Cell):
    tag = _init_my_cell_tag()

    def __init__(self, length=0):
        super().__init__(len(MyCell.tag.props) + length)
        base = MyCell.tag.offset
        self.values[base + 0] = ""

    @property
    def foo(self):
        return self.values[MyCell.tag.offset + 0]
    @foo.setter
    def foo(self, value):
        self._set_property(MyCell.tag.offset + 0, value,
            MyCell.tag.props[0][1])

    def type_id(self):
        return MyCell.tag.type_id

    def type_tag(self):
        return MyCell.tag

def _init_heartbeat_event_tag():
    props = []
    return Event.Tag(Event.tag, props,
        BuiltinEventType.HEARTBEAT_EVENT)

class HeartbeatEvent(Event):
    tag = _init_heartbeat_event_tag()

    def __init__(self, length=0):
        super().__init__(len(HeartbeatEvent.tag.props) + length)
        base = HeartbeatEvent.tag.offset
        pass

    def type_id(self):
        return HeartbeatEvent.tag.type_id

    def type_tag(self):
        return HeartbeatEvent.tag

def _init_flow_start_tag():
    props = []
    return Event.Tag(Event.tag, props,
        BuiltinEventType.FLOW_START)

class FlowStart(Event):
    tag = _init_flow_start_tag()

    def __init__(self, length=0):
        super().__init__(len(FlowStart.tag.props) + length)
        base = FlowStart.tag.offset
        pass

    def type_id(self):
        return FlowStart.tag.type_id

    def type_tag(self):
        return FlowStart.tag

def _init_flow_stop_tag():
    props = []
    return Event.Tag(Event.tag, props,
        BuiltinEventType.FLOW_STOP)

class FlowStop(Event):
    tag = _init_flow_stop_tag()

    def __init__(self, length=0):
        super().__init__(len(FlowStop.tag.props) + length)
        base = FlowStop.tag.offset
        pass

    def type_id(self):
        return FlowStop.tag.type_id

    def type_tag(self):
        return FlowStop.tag

def _init_timeout_event_tag():
    props = []
    props.append(('Key', 15))
    props.append(('IntParam', 5))
    props.append(('Test', 13))
    return Event.Tag(Event.tag, props,
        BuiltinEventType.TIMEOUT_EVENT)

class TimeoutEvent(Event):
    tag = _init_timeout_event_tag()

    def __init__(self, length=0):
        super().__init__(len(TimeoutEvent.tag.props) + length)
        base = TimeoutEvent.tag.offset
        self.values[base + 0] = None
        self.values[base + 1] = 0
        self.values[base + 2] = None

    @property
    def key(self):
        return self.values[TimeoutEvent.tag.offset + 0]
    @key.setter
    def key(self, value):
        self._set_property(TimeoutEvent.tag.offset + 0, value,
            TimeoutEvent.tag.props[0][1])

    @property
    def int_param(self):
        return self.values[TimeoutEvent.tag.offset + 1]
    @int_param.setter
    def int_param(self, value):
        self._set_property(TimeoutEvent.tag.offset + 1, value,
            TimeoutEvent.tag.props[1][1])

    @property
    def test(self):
        return self.values[TimeoutEvent.tag.offset + 2]
    @test.setter
    def test(self, value):
        self._set_property(TimeoutEvent.tag.offset + 2, value,
            TimeoutEvent.tag.props[2][1])

    def type_id(self):
        return TimeoutEvent.tag.type_id

    def type_tag(self):
        return TimeoutEvent.tag
