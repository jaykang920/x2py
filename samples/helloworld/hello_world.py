# auto-generated by x2py xpiler

from x2py.cell import MetaProperty, Cell
from x2py.event import Event

def _init_hello_req_tag():
    props = []
    props.append(MetaProperty('Name', 9))
    return Event.Tag(Event.tag, 'HelloReq', props,
        1)

class HelloReq(Event):
    tag = _init_hello_req_tag()

    def __init__(self, length=0):
        super(HelloReq, self).__init__(len(HelloReq.tag.props) + length)
        base = HelloReq.tag.offset
        self.values[base + 0] = ""

    @property
    def name(self):
        return self.values[HelloReq.tag.offset + 0]
    @name.setter
    def name(self, value):
        self._set_property(HelloReq.tag.offset + 0, value,
            HelloReq.tag.props[0].type_index)

    def type_id(self):
        return HelloReq.tag.type_id

    def type_tag(self):
        return HelloReq.tag

def _init_hello_resp_tag():
    props = []
    props.append(MetaProperty('Message', 9))
    return Event.Tag(Event.tag, 'HelloResp', props,
        2)

class HelloResp(Event):
    tag = _init_hello_resp_tag()

    def __init__(self, length=0):
        super(HelloResp, self).__init__(len(HelloResp.tag.props) + length)
        base = HelloResp.tag.offset
        self.values[base + 0] = ""

    @property
    def message(self):
        return self.values[HelloResp.tag.offset + 0]
    @message.setter
    def message(self, value):
        self._set_property(HelloResp.tag.offset + 0, value,
            HelloResp.tag.props[0].type_index)

    def type_id(self):
        return HelloResp.tag.type_id

    def type_tag(self):
        return HelloResp.tag
