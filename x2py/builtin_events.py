# auto-generated by x2py xpiler

from .event import *

class BuiltinEventType:
    HEARTBEAT_EVENT = -1
    FLOW_START = -2
    FLOW_STOP = -3
    TIMEOUT_EVENT = -4

class MyCell(Cell):
    tag = Cell.Tag(None, 'MyCell', 1)

    def __init__(self, length=0):
        super().__init__(MyCell.tag.num_props + length)
        self._foo = ""

    @property
    def foo(self):
        return self._foo
    @foo.setter
    def foo(self, value):
        self._foo = value

class HeartbeatEvent(Event):
    tag = Event.Tag(Event.tag, 'HeartbeatEvent', 0,
        BuiltinEventType.HEARTBEAT_EVENT)

    def __init__(self, length=0):
        super().__init__(HeartbeatEvent.tag.num_props + length)
        pass

class FlowStart(Event):
    tag = Event.Tag(Event.tag, 'FlowStart', 0,
        BuiltinEventType.FLOW_START)

    def __init__(self, length=0):
        super().__init__(FlowStart.tag.num_props + length)
        pass

class FlowStop(Event):
    tag = Event.Tag(Event.tag, 'FlowStop', 0,
        BuiltinEventType.FLOW_STOP)

    def __init__(self, length=0):
        super().__init__(FlowStop.tag.num_props + length)
        pass

class TimeoutEvent(Event):
    tag = Event.Tag(Event.tag, 'TimeoutEvent', 3,
        BuiltinEventType.TIMEOUT_EVENT)

    def __init__(self, length=0):
        super().__init__(TimeoutEvent.tag.num_props + length)
        self._key = None
        self._int_param = 0
        self._test = None

    @property
    def key(self):
        return self._key
    @key.setter
    def key(self, value):
        self._key = value

    @property
    def int_param(self):
        return self._int_param
    @int_param.setter
    def int_param(self, value):
        self._int_param = value

    @property
    def test(self):
        return self._test
    @test.setter
    def test(self, value):
        self._test = value
