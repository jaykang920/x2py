# auto-generated by x2py xpiler

from x2py.cell import Cell
from x2py.event import Event
from x2py.util.misc import hash_update

class HelloReq(Event):
    tag = Event.Tag(Event.tag, [('Name', 9)],
        1)

    def __init__(self, length=0):
        super().__init__(len(HelloReq.tag.props) + length)
        base = HelloReq.tag.offset
        self.values[base + 0] = ""

    @property
    def name(self):
        return self.values[HelloReq.tag.offset + 0]
    @name.setter
    def name(self, value):
        index = HelloReq.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return HelloReq.tag.type_id

    def type_tag(self):
        return HelloReq.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = HelloReq.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = HelloReq.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = HelloReq.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value

class HelloResp(Event):
    tag = Event.Tag(Event.tag, [('Message', 9)],
        2)

    def __init__(self, length=0):
        super().__init__(len(HelloResp.tag.props) + length)
        base = HelloResp.tag.offset
        self.values[base + 0] = ""

    @property
    def message(self):
        return self.values[HelloResp.tag.offset + 0]
    @message.setter
    def message(self, value):
        index = HelloResp.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return HelloResp.tag.type_id

    def type_tag(self):
        return HelloResp.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = HelloResp.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = HelloResp.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = HelloResp.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value

class NumReq(Event):
    tag = Event.Tag(Event.tag, [('Value', 5)],
        3)

    def __init__(self, length=0):
        super().__init__(len(NumReq.tag.props) + length)
        base = NumReq.tag.offset
        self.values[base + 0] = 0

    @property
    def value(self):
        return self.values[NumReq.tag.offset + 0]
    @value.setter
    def value(self, value):
        index = NumReq.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return NumReq.tag.type_id

    def type_tag(self):
        return NumReq.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = NumReq.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = NumReq.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = NumReq.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value

class NumResp(Event):
    tag = Event.Tag(Event.tag, [('Result', 5)],
        4)

    def __init__(self, length=0):
        super().__init__(len(NumResp.tag.props) + length)
        base = NumResp.tag.offset
        self.values[base + 0] = 0

    @property
    def result(self):
        return self.values[NumResp.tag.offset + 0]
    @result.setter
    def result(self, value):
        index = NumResp.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return NumResp.tag.type_id

    def type_tag(self):
        return NumResp.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = NumResp.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = NumResp.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = NumResp.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value
