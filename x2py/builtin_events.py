# auto-generated by x2py xpiler

from .event import *
from .util.misc import *

class BuiltinEventType:
    HEARTBEAT_EVENT = -1
    FLOW_START = -2
    FLOW_STOP = -3
    TIMEOUT_EVENT = -4

class MyCell(Cell):
    tag = Cell.Tag(Cell.tag, 'MyCell', 1)

    def __init__(self, length=0):
        super().__init__(MyCell.tag.num_props + length)
        self._foo = ""

    @property
    def foo(self):
        return self._foo
    @foo.setter
    def foo(self, value):
        self.fingerprint.touch(MyCell.tag.offset + 0)
        self._foo = value

    def type_id(self):
        return MyCell.tag.type_id

    def type_tag(self):
        return MyCell.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyCell.tag.offset
        if other.fingerprint.get(base + 0):
            if self._foo != other._foo:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._foo != other._foo:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._foo))
        return value

class HeartbeatEvent(Event):
    tag = Event.Tag(Event.tag, 'HeartbeatEvent', 0,
        BuiltinEventType.HEARTBEAT_EVENT)

    def __init__(self, length=0):
        super().__init__(HeartbeatEvent.tag.num_props + length)
        pass

    def type_id(self):
        return HeartbeatEvent.tag.type_id

    def type_tag(self):
        return HeartbeatEvent.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = HeartbeatEvent.tag.offset
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        return value

class FlowStart(Event):
    tag = Event.Tag(Event.tag, 'FlowStart', 0,
        BuiltinEventType.FLOW_START)

    def __init__(self, length=0):
        super().__init__(FlowStart.tag.num_props + length)
        pass

    def type_id(self):
        return FlowStart.tag.type_id

    def type_tag(self):
        return FlowStart.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = FlowStart.tag.offset
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        return value

class FlowStop(Event):
    tag = Event.Tag(Event.tag, 'FlowStop', 0,
        BuiltinEventType.FLOW_STOP)

    def __init__(self, length=0):
        super().__init__(FlowStop.tag.num_props + length)
        pass

    def type_id(self):
        return FlowStop.tag.type_id

    def type_tag(self):
        return FlowStop.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = FlowStop.tag.offset
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        return value

class TimeoutEvent(Event):
    tag = Event.Tag(Event.tag, 'TimeoutEvent', 3,
        BuiltinEventType.TIMEOUT_EVENT)

    def __init__(self, length=0):
        super().__init__(TimeoutEvent.tag.num_props + length)
        self._key = None
        self._int_param = 0
        self._test = None

    @property
    def key(self):
        return self._key
    @key.setter
    def key(self, value):
        self.fingerprint.touch(TimeoutEvent.tag.offset + 0)
        self._key = value

    @property
    def int_param(self):
        return self._int_param
    @int_param.setter
    def int_param(self, value):
        self.fingerprint.touch(TimeoutEvent.tag.offset + 1)
        self._int_param = value

    @property
    def test(self):
        return self._test
    @test.setter
    def test(self, value):
        self.fingerprint.touch(TimeoutEvent.tag.offset + 2)
        self._test = value

    def type_id(self):
        return TimeoutEvent.tag.type_id

    def type_tag(self):
        return TimeoutEvent.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = TimeoutEvent.tag.offset
        if other.fingerprint.get(base + 0):
            if self._key != other._key:
                return False
        if other.fingerprint.get(base + 1):
            if self._int_param != other._int_param:
                return False
        if other.fingerprint.get(base + 2):
            if self._test != other._test:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._key != other._key:
            return False
        if self._int_param != other._int_param:
            return False
        if self._test != other._test:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._key))
        value = hash_update(value, hash(self._int_param))
        value = hash_update(value, hash(self._test))
        return value
