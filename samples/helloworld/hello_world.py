# auto-generated by x2py xpiler

from x2py.cell import Cell
from x2py.event import Event
from x2py.util.misc import hash_update

class HelloReq(Event):
    tag = Event.Tag(Event.tag, 'HelloReq', 1,
        1)

    def __init__(self, length=0):
        super().__init__(HelloReq.tag.num_props + length)
        self._name = ""

    @property
    def name(self):
        return self._name
    @name.setter
    def name(self, value):
        self.fingerprint.touch(HelloReq.tag.offset + 0)
        self._name = value

    def type_id(self):
        return HelloReq.tag.type_id

    def type_tag(self):
        return HelloReq.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = HelloReq.tag.offset
        if other.fingerprint.get(base + 0):
            if self._name != other._name:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._name != other._name:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._name))
        return value

class HelloResp(Event):
    tag = Event.Tag(Event.tag, 'HelloResp', 1,
        2)

    def __init__(self, length=0):
        super().__init__(HelloResp.tag.num_props + length)
        self._message = ""

    @property
    def message(self):
        return self._message
    @message.setter
    def message(self, value):
        self.fingerprint.touch(HelloResp.tag.offset + 0)
        self._message = value

    def type_id(self):
        return HelloResp.tag.type_id

    def type_tag(self):
        return HelloResp.tag

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = HelloResp.tag.offset
        if other.fingerprint.get(base + 0):
            if self._message != other._message:
                return False
        return True

    def __eq__(self, other):
        if not super().__eq__(other):
            return False
        if self._message != other._message:
            return False
        return True

    def __hash__(self):
        value = super().__hash__()
        value = hash_update(value, hash(self._message))
        return value
