# auto-generated by x2py xpiler

from x2py.cell import Cell
from x2py.event import Event
from x2py.util.misc import hash_update

class MyConsts:
    MY_CONST1 = 1
    MY_CONST2 = 2

class MyCell1(Cell):
    tag = Cell.Tag(None, [('Foo', 5)])

    def __init__(self, length=0):
        super().__init__(len(MyCell1.tag.props) + length)
        base = MyCell1.tag.offset
        self.values[base + 0] = 0

    @property
    def foo(self):
        return self.values[MyCell1.tag.offset + 0]
    @foo.setter
    def foo(self, value):
        index = MyCell1.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return MyCell1.tag.type_id

    def type_tag(self):
        return MyCell1.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = MyCell1.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyCell1.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = MyCell1.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value

class MyCell2(MyCell1):
    tag = Cell.Tag(MyCell1.tag, [('Bar', 9)])

    def __init__(self, length=0):
        super().__init__(len(MyCell2.tag.props) + length)
        base = MyCell2.tag.offset
        self.values[base + 0] = ""

    @property
    def bar(self):
        return self.values[MyCell2.tag.offset + 0]
    @bar.setter
    def bar(self, value):
        index = MyCell2.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return MyCell2.tag.type_id

    def type_tag(self):
        return MyCell2.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = MyCell2.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyCell2.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = MyCell2.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value

class MyEvent1(Event):
    tag = Event.Tag(Event.tag, [('Foo', 9)],
        1)

    def __init__(self, length=0):
        super().__init__(len(MyEvent1.tag.props) + length)
        base = MyEvent1.tag.offset
        self.values[base + 0] = ""

    @property
    def foo(self):
        return self.values[MyEvent1.tag.offset + 0]
    @foo.setter
    def foo(self, value):
        index = MyEvent1.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return MyEvent1.tag.type_id

    def type_tag(self):
        return MyEvent1.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = MyEvent1.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyEvent1.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = MyEvent1.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value

class MyEvent2(MyEvent1):
    tag = Event.Tag(MyEvent1.tag, [('Bar', 9)],
        2)

    def __init__(self, length=0):
        super().__init__(len(MyEvent2.tag.props) + length)
        base = MyEvent2.tag.offset
        self.values[base + 0] = ""

    @property
    def bar(self):
        return self.values[MyEvent2.tag.offset + 0]
    @bar.setter
    def bar(self, value):
        index = MyEvent2.tag.offset + 0
        self.fingerprint.touch(index)
        self.values[index] = value

    def type_id(self):
        return MyEvent2.tag.type_id

    def type_tag(self):
        return MyEvent2.tag

    def equals(self, other):
        if not super().equals(other):
            return False
        base = MyEvent2.tag.offset
        if self.values[base + 0] != other.values[base + 0]:
            return False
        return True

    def equivalent(self, other):
        if not super().equivalent(other):
            return False
        base = MyEvent2.tag.offset
        if other.fingerprint.get(base + 0):
            if self.values[base + 0] != other.values[base + 0]:
                return False
        return True

    def hash_code(self, fingerprint):
        value = super().hash_code(fingerprint)
        base = MyEvent2.tag.offset
        if fingerprint.get(base + 0):
            value = hash_update(value, base + 0)
            value = hash_update(value, hash(self.values[base + 0]))
        return value
